package com.c1b1.v2.studyone.studyone;

import com.c1b1.v2.studyone.studyone.domain.DailyWord;
import com.c1b1.v2.studyone.studyone.domain.DisplayWordForm;
import com.c1b1.v2.studyone.studyone.domain.User;
import com.c1b1.v2.studyone.studyone.domain.UserWord;
import com.c1b1.v2.studyone.studyone.repository.DailyWordRepository;
import com.c1b1.v2.studyone.studyone.repository.UserRepository;
import com.c1b1.v2.studyone.studyone.repository.UserWordRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.InsufficientAuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;

import static java.util.stream.Collectors.toList;
import static org.springframework.http.ResponseEntity.ok;

@Controller // This means that this class is a Controller
@RequestMapping(path="/v1/words") // This means URL's start with /demo (after Application path)
public class MainController {

    Logger logger = LoggerFactory.getLogger(MainController.class);

    @Autowired // This means to get the bean called dailyWordRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DailyWordRepository dailyWords;

    @Autowired
    private UserWordRepository userWords;

    @Autowired
    private UserRepository users;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity add (HttpServletRequest request, @RequestParam String word
            , @RequestParam String meaning) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        DailyWord w = DailyWord.builder()
                .word(word)
                .meaning(meaning)
                .build();
        dailyWords.save(w);
        return ResponseEntity.created(
                ServletUriComponentsBuilder
                        .fromContextPath(request)
                        .path("/v1/words/{id}")
                        .buildAndExpand(w.getId())
                        .toUri())
                .build();
    }

    @PostMapping(path="/create") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity create(HttpServletRequest request, @RequestBody DisplayWordForm form) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        DailyWord w = DailyWord.builder()
                .word(form.getWord())
                .meaning(form.getMeaning())
                .build();
        dailyWords.save(w);
        return ResponseEntity.created(
                ServletUriComponentsBuilder
                        .fromContextPath(request)
                        .path("/v1/words/{id}")
                        .buildAndExpand(w.getId())
                        .toUri())
                .build();
    }


    @GetMapping(path="/dailywords")
    public @ResponseBody
    ResponseEntity dailyWords(@AuthenticationPrincipal UserDetails userDetails){

        Map<Object, Object> model = new HashMap<>();

        Optional<User> user =  users.findByUsername(userDetails.getUsername());

        if (!user.isPresent())
            throw new InsufficientAuthenticationException("User is not authorized");

        // should limit how many are fetched
        List<UserWord> userWordList = userWords.findByUserId(user.get().getId());

        List<UserWord> userWordsByDate = userWords.findTop100ByUserIdOrderByCreateDateDesc(user.get().getId());

        if (userWordsByDate.isEmpty() || !latestUserWordMatchesServerDate(userWordsByDate)) {
            // need new static entry from table
            DailyWord wordOfTheDay = addNewDailyWord(user.get(), userWordsByDate);
            model.put("wordOfTheDay", wordOfTheDay);
        } else {
            System.out.println("We found our max date in the current user word table");
            model.put("wordOfTheDay", userWordsByDate.get(0));
        }

        // This returns a JSON or XML with the words
        return ok(model);
    }

    @GetMapping(path="/all")
    public @ResponseBody
    ResponseEntity getAllWords() {
        // This returns a JSON or XML with the words
        return ok(dailyWords.findAll());
    }

    private DailyWord addNewDailyWord(User user, List<UserWord> userWordsByDate) {
        DailyWord newDailyWord = userWordsByDate.isEmpty() ?
                dailyWords.findTop1ByIdGreaterThan( /* lowestId= */0).get(0) :
                dailyWords.findTop1ByIdGreaterThan(userWordsByDate.get(0).getDailyWord().getId()).get(0);

        userWords.save(UserWord.builder()
                .user(user)
                .dailyWord(newDailyWord)
                .build());

        return newDailyWord;
    }

    private boolean latestUserWordMatchesServerDate(List<UserWord> userWordsByDate) {
        UserWord wordWithMaxDate = userWordsByDate.get(0);
        return matchesServerDate(wordWithMaxDate.getCreateDate());
    }

    private boolean matchesServerDate(Date savedDate) {
        Date serverDate = new Date(); // default system date (PST)

        // Default time zone is PST
        LocalDate serverLocalDate = serverDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        Instant savedInstant = Instant.ofEpochMilli(savedDate.getTime());
        LocalDateTime savedLocalDateTime = LocalDateTime.ofInstant(savedInstant, ZoneId.systemDefault());
        LocalDate savedLocalDate = savedLocalDateTime.toLocalDate();

        System.out.println("Comparing " + savedLocalDate.toString() + " with system local date " + serverLocalDate.toString());
        System.out.println(savedLocalDate.equals(serverLocalDate));
        boolean match = savedLocalDate.equals(serverLocalDate);
        return match;
    }
}